version: 2.1
orbs:
  slack: circleci/slack@4.9.3


jobs:
       
  Build-Backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout

      - run: |
          cd backend
          npm i
          npm run build
      
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist            
          key: backend-build -{{ checksum "package-lock.json" }}
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1


  Build-Frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout

      - run: |
          cd frontend
          npm i
          npm run build

      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build -{{ checksum "package-lock.json" }}
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  Test-Frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build -{{ checksum "package-lock.json" }}
      - run: |
          cd frontend
          npm test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  Test-Backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build -{{ checksum "package-lock.json" }}
      - run: |
          cd backend
          npm test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1



  Scan-Frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key : frontend-build -{{ checksum "package-lock.json" }}
      - run : 
          name: Fix Audit problems Frontend

          command : |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  Scan-Backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key : backend-build -{{ checksum "package-lock.json" }}
      - run : 
          name: Fix Audit problems Backend
          command : |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1



  Deploy-Infrastructure:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      # - run:
      #     name: Ensure back-end infrastructure exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --tags project=udacity-projec-backend \
      #         --stack-name "back-end-${CIRCLE_WORKFLOW_ID}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udacity-projec-frontend \
      #         --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backendIP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-67bf1a9d-7240-40db-b56f-29d16b22cd00 \
            --output text)
            echo $backendIP
            echo $backendIP >> .circleci/ansible/inventory.txt


      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
              # Here's where you will add some code to rollback on failure     


  Configure-Infrastructure:
    docker:
      - image: cimg/python:3.10.6
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "34:2e:bb:9d:6c:9c:eb:9e:f6:bc:5c:14:92:b4:c0:af"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --user ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
  Run-Migrations:
    docker : 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run : 
          name : Install dependencies
          command: |

            cd backend
            npm install
      - run:
          name: Run migrations
          command: |
            ls
            cd backend
            npm run migrations > migration_result.txt
            cat migration_result.txt
      - save_cache:
          paths: 
            - backend/migration_result.txt
          key: migration-result -{{ checksum "package-lock.json" }}
     # Here's where you will add some code to rollback on failure      
  
  Deploy-Frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .circleci/ansible/

      - run:
          name: Install dependencies
          command: |
              npm install
      - run:
          name: Get backend url
          command: |
            cat project/.circleci/ansible/inventory.txt
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      # - run:
      #     name: Deploy frontend objects
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure      


workflows:
  Default:
    jobs:
      # - Build-Frontend : 
      #     context: slacknotifications

      # - Build-Backend : 
      #     context: slacknotifications

      # - Test-Frontend :
      #     requires : 
      #       - Build-Frontend
      #     context: slacknotifications

      # - Test-Backend: 
      #     requires : 
      #       - Build-Backend
      #     context: slacknotifications

      # - Scan-Frontend : 
      #     requires:
      #       - Build-Frontend
      #     context: slacknotifications
      # - Scan-Backend: 
      #     requires:
      #       - Build-Backend
      #     context: slacknotifications
      - Deploy-Infrastructure
      # - Configure-Infrastructure:
      #     requires: [Deploy-Infrastructure]
      # - Run-Migrations : 
      #     requires:
      #       - Configure-Infrastructure
      - Deploy-Frontend:
            requires:
              - Deploy-Infrastructure
     
